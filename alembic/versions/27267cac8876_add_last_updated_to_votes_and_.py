"""add_last_updated_to_votes_and_transcription_to_audio_notes

Revision ID: 27267cac8876
Revises: 
Create Date: 2025-05-27 20:14:46.657469

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '27267cac8876'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('audio_notes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('transcription', sa.String(), nullable=True))

    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(), nullable=True))
        # If you want to backfill existing rows with a default value for last_updated:
        # batch_op.execute("UPDATE votes SET last_updated = CURRENT_TIMESTAMP WHERE last_updated IS NULL")
        # Or, if your model defines a default, SQLAlchemy might handle it if the column is created as nullable first, then altered.
        # For SQLite, it's often simpler to add nullable, then update, then (if desired) alter to not nullable.

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.drop_column('last_updated')

    with op.batch_alter_table('audio_notes', schema=None) as batch_op:
        batch_op.drop_column('transcription')

    # ### end Alembic commands ###
