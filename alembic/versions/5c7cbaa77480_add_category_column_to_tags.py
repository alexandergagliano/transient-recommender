"""add_category_column_to_tags

Revision ID: 5c7cbaa77480
Revises: eefed8fcdccd
Create Date: 2025-05-30 17:05:26.240392

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '5c7cbaa77480'
down_revision: Union[str, None] = 'eefed8fcdccd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch mode for SQLite compatibility
    with op.batch_alter_table('tags', schema=None) as batch_op:
        # Add the category column with a default value
        batch_op.add_column(sa.Column('category', sa.String(), nullable=True))
        
        # Update existing rows to have 'general' as default category
        batch_op.execute("UPDATE tags SET category = 'general' WHERE category IS NULL")
        
        # Drop the old unique constraint and create a new one with category
        batch_op.drop_constraint('unique_user_tag', type_='unique')
        batch_op.create_unique_constraint('unique_user_tag_category', ['user_id', 'ztfid', 'tag_name', 'category'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tags', schema=None) as batch_op:
        batch_op.drop_constraint('unique_user_tag_category', type_='unique')
        batch_op.create_unique_constraint('unique_user_tag', ['user_id', 'ztfid', 'tag_name'])
        batch_op.drop_column('category')
    # ### end Alembic commands ###
